#+STARTUP: indent 
#+TITLE: Doug Horst's emacs configuration
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing
* Introduction
This is my current emacs loader file through babel.  I have borrowed heavily
from Dennis Ogbe, Arjen Wiersma and Sacha Chua
* Doug's custom functions
** These helper functions allow restarting  after making changes
*** DONE figure out the key bindings for my custom functions
#+BEGIN_SRC emacs-lisp :tangle yes
(defun reload-config ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
  (defun config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c r c") 'reload-config)
  (global-set-key (kbd "C-c o c") 'config)
#+END_SRC
** Kill whole word from anyplace in the word
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun dch-kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c k w") 'dch-kill-whole-word)
#+END_SRC
** Kill current buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun dch-kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'dch-kill-curr-buffer)
#+END_SRC
** Kill all buffers
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun dch-kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'dch-kill-all-buffers)
#+END_SRC
** copy (non-destructive) whole line
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun dch-copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'dch-copy-whole-line)
#+END_SRC
* Set up the basic user info
We'll start with just full name and contact info.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Set user name and contact info

  (setq user-full-name "Doug Horst"
        user-mail-address "dchorst@gmail.com"
        user-login-name "dchorst")
#+END_SRC
* Setup the basic user interface elements
** Turn off the annoying bell.
In version 25+ the bell function was turned on by default and doesn't seem to
have a silent option.  Just kill the function.

#+BEGIN_SRC emacs-lisp :tangle yes

(setq ring-bell-function 'ignore)
(setq auto-revert-verbose nil)

#+END_SRC
** Get more editing space without a lot of visual cruft.
Turn off the tool bar and the scroll bar.  Leave the menu bar in.  I don't
remember the all the actions/options for various modes and I can get a refresher
from the menus.
*** TODO Figure out how to make the menu bar work in terminal mode.
#+BEGIN_SRC emacs-lisp :tangle yes

;; ui elements

(tool-bar-mode -1)
(scroll-bar-mode -1)
;;(menu-bar-mode -1)

;; mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

#+END_SRC
** Set up for smooth scrolling rather than the jumping
#+BEGIN_SRC emacs-lisp :tangle yes

(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

#+END_SRC

** Set up the start up options, initial layout and frame geography.
#+BEGIN_SRC emacs-lisp :tangle yes

(setq-default fill-column 80)
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)

;;; Opening geometry

(add-to-list 'default-frame-alist '(height . 60))
(add-to-list 'default-frame-alist '(width . 235))
;;; Minimal fringe
(fringe-mode '(4 . 4))

#+END_SRC
** Start with two windows and dired home directory in the left window -INACTIVE
I've been back and forth on this.  As I get more comfortable with working dired
into my workflow I think I want this in.
I am going to try dashboard for the startup for a while.  We'll see which works better.
#+BEGIN_SRC emacs-lisp :tangle no

(when window-system (split-window-right))
(setq initial-buffer-choice "~/")

#+END_SRC
** Let's try dashboard for configuring the startup
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items ' ((recents . 10)))
    (setq dashboard-banner-logo-title "Welcome Back"))
#+END_SRC
** Make sure utf-8 is the default character set.
#+BEGIN_SRC emacs-lisp :tangle yes

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

#+END_SRC

** Cursor setup
I want a solid (non-blinking) cursor and highlight the line we are currently working on.
#+BEGIN_SRC emacs-lisp :tangle yes

(blink-cursor-mode -1)
(setq blink-cursor-blinks 0)
(when window-system (global-hl-line-mode t))
(make-variable-buffer-local 'global-hl-line-mode)

#+END_SRC
** I'd also like to use beacon mode to highlight the cursor location when I switch buffers.
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package beacon
      :ensure t
      :init
      (beacon-mode 1)
      (setq beacon-push-mark 35)
      (setq beacon-color "#666600"))
#+END_SRC

** Setup basic workflow preferences
#+BEGIN_SRC emacs-lisp :tangle yes

;; Newline at end of file
(setq require-final-newline t)

;; Use 'y' or 'n' instead of 'yes' or 'no'
(fset 'yes-or-no-p 'y-or-n-p)

;; delete the selection with a keypress
(delete-selection-mode t)

#+END_SRC
*** Use which key for helping with what key to press next.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
** Spaces and tabs
*** Spaces instead of tabs
Tabs are evil! I want spaces instead of tabs, and want exactly 3
spaces instead of a tab. Note to self: Apparently emacs is smart
enough to not do this in Python mode, which is a good thing.

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Natural reading, wrap at the word
  (setq-default word-wrap 1)

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 3)
  (setq-default tab-stop-list (number-sequence 3 120 3))
  (setq c-basic-indent 3)
  (setq sh-basic-offset 3)
#+END_SRC

*** Agressive indent mode for lisps
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package aggressive-indent
     :ensure t
     :config
         (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
         (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
         (add-hook 'lisp-mode-hook #'aggressive-indent-mode)
  )
#+END_SRC

** Use rainbow package to show colors.
Every time emacs encounters a hexadecimal code that resembles a color, it will
automatically highlight it in the appropriate color.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-mode
  :ensure t
  :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Org Bullets
Let's use the org bullets package to make the bullets a little prettier.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Pretty symbols
Changes lambda and a few others to display the actual symbols in GUI version only.
#+BEGIN_SRC emacs-lisp :tangle yes
(when window-system
      (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))
#+END_SRC
* Let's set up the themes and font faces
** Theme
I used the Solarized themes until changing to Pop!_OS.  With the Pop!_OS themes
Solarized didn't blend well.  There is an emacs theme for Pop!_OS in progress
but it is not there yet so I settled on Darktooth.  It is close but with better
contrast. I will work at getting that Pop!_OS theme as I like it which is why I
add the custom themes directory.
*** TODO Adjust the Pop!_OS emacs theme to my preferences

#+BEGIN_SRC emacs-lisp :tangle yes

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  (use-package darktooth-theme
     :ensure t
     :config
       (load-theme 'darktooth 'no-confirm))

#+END_SRC
** Font faces
I like Adobe's Source Code Pro for the text body and inconsolata for the frame faces.
#+BEGIN_SRC emacs-lisp :tangle yes

(set-face-attribute 'default nil :family "Source Code Pro" :height 120 )
(set-frame-font  "inconsolata" nil t)
(set-face-attribute 'fringe nil :background "#2d2d2d")
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-comment-face nil :weight 'semibold)
(set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono for Powerline")

#+END_SRC
** Use symbols where appropriate
#+BEGIN_SRC emacs-lisp :tangle yes
(when window-system (global-prettify-symbols-mode t))
#+END_SRC
* Backup system - replace the standard backup system with one of our own.
We will do a version control system.  We will store up to 64 versions of the
file in a sub-directory, .bak oif the current pwd.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq version-control t        ;; OpenVMS-esque
      backup-by-copying t      ;; Copy-on-write-esque
      kept-new-versions 64     ;; Indeliable-ink-esque
      kept-old-versions 0      ;; 
      delete-old-versions nil  ;; 
      )
(setq backup-directory-alist   ;; Save backups in $(pwd)/.bak
      '(("." . ".bak"))        ;;
      )

; Disable auto-saving
(setq auto-save-default nil)

#+END_SRC

* dired
Dennis Ogbe has some extensive customization of dired that I will try for a while
** General Settings
The first two lines of this tell dired to stop asking me whether I
want to recursively delete or copy, since I never respond to that
question with "No".

The last line enables "Do What I Mean" mode for dired: If I'm in a
split frame with two dired buffers, the default target to copy (and
rename) will be the other window.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq dired-recursive-copies 'always)
(setq dired-recursive-deleted 'always)
(setq dired-dwim-target t)
(setq dired-listing-switches "-alh")

#+END_SRC
** Automatically revert dired buffers
I also want to automatically revert buffers, but to be quiet about it.
The first line actually enables auto-revert for any buffers.  I also
added <F5> as a key to manually revert.
#+BEGIN_SRC emacs-lisp :tangle yes

(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
(global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC
** Less verbosity
We can show file details with the ( and ) keys.
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package dired-details
   :ensure t
   :config
   (setq dired-details-hidden-string "")
)

#+END_SRC
** Opening files
This is mostly stolen from here. Uses nohup to spawn child processes
without annoying new buffers. First, we define a list of default
programs.

#+BEGIN_SRC emacs-lisp :tangle no

  (use-package dired-x
    :ensure nil)
  (use-package dired-aux
    :ensure nil)

  (setq dired-guess-shell-alist-user
        '(("\\.pdf\\'" "evince")
          ("\\.\\(?:djvu\\|eps\\)\\'" "zathura")
          ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "eog")
          ("\\.\\(?:xcf\\)\\'" "gimp")
          ("\\.\\(?:csv\\|odt\\|ods\\)\\'" "libreoffice")
          ("\\.\\(?:mp4\\|mp3\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\'"
           "vlc")
          ("\\.html?\\'" "firefox")))
#+END_SRC

Now define a new function to start a process in the background.

#+BEGIN_SRC emacs-lisp :tangle no

  (defvar dired-filelist-cmd
    '(("vlc" "-L")))

  (defun dired-start-process (cmd &optional file-list)
    (interactive
     (let ((files (dired-get-marked-files
                   t current-prefix-arg)))
       (list
        (dired-read-shell-command "Open with: "
                                  current-prefix-arg files)
        files)))
    (let (list-switch)
      (start-process
       cmd nil shell-file-name
       shell-command-switch
       (format
        "nohup 1>/dev/null 2>/dev/null %s \"%s\""
        (if (and (> (length file-list) 1)
                 (setq list-switch
                       (cadr (assoc cmd dired-filelist-cmd))))
            (format "%s %s" cmd list-switch)
          cmd)
        (mapconcat #'expand-file-name file-list "\" \"")))))
#+END_SRC
At last, we remap two standard keys: We want !, which defaults to
dired-do-shell-command, to run the old dired-do-aync-shell-command and
use it for things like a quick unzip or unrar x or something like
that. The old & shall be remapped to dired-start-process.

#+BEGIN_SRC emacs-lisp :tangle no

  (define-key dired-mode-map "!" 'dired-do-async-shell-command)
  (define-key dired-mode-map "&" 'dired-start-process)
#+END_SRC
* Mode line
Let's set up the mode line so it is readable.
** First, line number formatting
#+BEGIN_SRC emacs-lisp :tangle yes

(require 'linum)
(set-face-attribute 'linum nil
                    :background (face-attribute 'default :background)
                    :foreground (face-attribute 'font-lock-comment-face :foreground))
(defface linum-current-line-face
  `((t :background "gray30" :foreground "black"))
  "Face for the currently active Line number")
(defvar my-linum-current-line-number 0)
(defun get-linum-format-string ()
  (setq-local my-linum-format-string
              (let ((w (length (number-to-string
                                (count-lines (point-min) (point-max))))))
                (concat " %" (number-to-string w) "d "))))
(add-hook 'linum-before-numbering-hook 'get-linum-format-string)
(defun my-linum-format (line-number)
  (propertize (format my-linum-format-string line-number) 'face
              (if (eq line-number my-linum-current-line-number)
                  'linum-current-line-face
                'linum)))
(setq linum-format 'my-linum-format)
(defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
    ad-do-it))
(ad-activate 'linum-update)

#+END_SRC
Toggle line numbers (num) or relative line numbers (rnum) in a safe
manner by turning the other off in case it is on.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun num ()
  (interactive)
  (if (bound-and-true-p relative-line-numbers-mode)
      (relative-line-numbers-mode 'toggle))
  (linum-mode 'toggle))
(defun rnum ()
  (interactive)
  (if (bound-and-true-p linum-mode)
      (linum-mode 'toggle))
  (relative-line-numbers-mode 'toggle))
#+END_SRC
** Let's use a nice graphical modification to the mode line
Use the cool powerline setup for the mode line

#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode 1)
  (use-package powerline
    :ensure t
    :config
       (powerline-center-theme)
  )
  ;; compact mode-line
  (use-package smart-mode-line
    :ensure t
    :defer t)
   ;; hey where is my clock ?
    (setq display-time-format " %H:%M %b %d %a ")
    (display-time-mode 1)
#+END_SRC
* Window management with ace-window.
This will add a large window indicator when there are more than 2 windows
showing and let me type in the window indicator to go to that window, I still
must start the sequence with C-X O to start it.  I originally discovered this
from both Mike Zamansky and Sachua.
#+BEGIN_SRC emacs-lisp :tangle yes
 (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-scope 'frame)
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC
* Parentheses
** Show parens
This mode highlights the matching parenthesis on point.

#+BEGIN_SRC emacs-lisp :tangle yes

  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+END_SRC

** Rainbow delimiters for LISP based languages
But for lisp like languages, I want to witness the full power of
colorful rainbow-delimiters! I will even set them to pastel versions
of the rainbow colors stolen from this wallpaper.

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package rainbow-delimiters
     :ensure t
     :config
       (set-face-attribute 'rainbow-delimiters-depth-1-face nil
                           :foreground "#78c5d6")
       (set-face-attribute 'rainbow-delimiters-depth-2-face nil
                           :foreground "#bf62a6")
       (set-face-attribute 'rainbow-delimiters-depth-3-face nil
                           :foreground "#459ba8")
       (set-face-attribute 'rainbow-delimiters-depth-4-face nil
                           :foreground "#e868a2")
       (set-face-attribute 'rainbow-delimiters-depth-5-face nil
                           :foreground "#79c267")
       (set-face-attribute 'rainbow-delimiters-depth-6-face nil
                           :foreground "#f28c33")
       (set-face-attribute 'rainbow-delimiters-depth-7-face nil
                           :foreground "#c5d647")
       (set-face-attribute 'rainbow-delimiters-depth-8-face nil
                           :foreground "#f5d63d")
       (set-face-attribute 'rainbow-delimiters-depth-9-face nil
                           :foreground "#78c5d6")
  )

  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'show-paren-mismatch
                      :strike-through t)
#+END_SRC

Set up for the modes for rainbow delimiters will be used

#+BEGIN_SRC emacs-lisp :tangle yes

  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

** Paredit
This setup is largely based on the defaults and [[https://gitlab.com/buildfunthings/emacs-config][Arjen Wiersma]] setup for clojure.

#+BEGIN_SRC emacs-lisp :tangle yes

    ;; Paredit

    (use-package paredit
      :ensure t
      :config
      (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'pythonn-mode-hook          #'enable-paredit-mode)
      )
    ;; useful global keybindings from Endless Parentheses Blogpost 28-June-2016

    (global-set-key (kbd "C-M-u") #'paredit-backward-up)
    (global-set-key (kbd "C-M-n") #'paredit-forward-up)
    ;; This one's surpisingly useful for writing prose.
    (global-set-key "\M-S" #'paredit-splice-sexp-killing-backward)
    (global-set-key "\M-R" #'paredit-raise-sexp)
    (global-set-key "\M-(" #'paredit-wrap-round)
    (global-set-key "\M-[" #'paredit-wrap-square)
    (global-set-key "\M-{" #'paredit-wrap-curly)

    ;; fix the paredit binding of M-q and set it back to fill-paragraph
    (when (fboundp 'paredit-mode-map)
       (eval-after-load 'paredit
           (define-key paredit-mode-map (kbd "M-q") nil)))
    (global-set-key (kbd "M-q") 'fill-paragraph)

#+END_SRC

One final thing for paredit.  Let's see if we can use it in the minibuffer as well.

#+BEGIN_SRC emacs-lisp :tangle yes

  (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
#+END_SRC
* Handling the buffers
Again borrowing from Dennis Ogbe who also borrowed these ideas for implementing
ibuffer.
** Filter groups
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ibuffer
   :ensure t
   :config
(setq my-ibuffer-filter-group-name "my-filters"))
(setq ibuffer-saved-filter-groups
      (list (nreverse
             `(("Directories" (mode . dired-mode))
               ("Magit" (name . "^\\*magit.*$"))
               ("Org" (mode . org-mode))
               ("Shell" (or (mode . term-mode)
                            (mode . eshell-mode)
                            (mode . shell-mode)))
               ("Global" (name . "^\\*.*\\*$"))
               ("Interactive" (or (mode . inferior-python-mode)
                                  (mode . inferior-lisp-mode)
                                  (mode . inferior-scheme-mode)
                                  (mode . ielm-mode)))
               ,my-ibuffer-filter-group-name))))
#+END_SRC

Reverse the order of the filter groups. Kind of confusing: Since I'm reversing
the order of the groups above, this snippet ensures that the groups are ordered
in the way they are written above, with the "Default" group on top. This advice
might need to be ported to the new advice system soon.
#+BEGIN_SRC emacs-lisp :tangle yes

(defadvice ibuffer-generate-filter-groups
    (after reverse-ibuffer-groups () activate)
  (setq ad-return-value (nreverse ad-return-value)))

#+END_SRC
** Other settings

Only show groups that have active buffers

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
Dont show the summary or headline.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ibuffer-display-summary nil)
#+END_SRC

Display more characters in the buffer name column, also convert sizes to a human
readable format. [[http://www.emacswiki.org/emacs/IbuffferMode][Stolen from the wiki.]]

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 40 60 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)))
#+END_SRC

** Buffers
Automagically keep buffer list up to date, enable filter groups defined above,
disable trailing whitespace

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun my-ibuffer-hooks ()
    (ibuffer-auto-mode 1)
    (ibuffer-switch-to-saved-filter-groups my-ibuffer-filter-group-name)
    (no-trailing-whitespace))
  (add-hook 'ibuffer-mode-hook 'my-ibuffer-hooks)
#+END_SRC

** Alias/keybinding - enable instead of list buffers

#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'list-buffers 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

This is a long line to see if we fixed the key binding for the fill-paragraph
command. And some more text to test it.

* Terminal
We'll try Dennis Ogbe's ansi terminal setup for a while.  We'll also set up
better shell as an alternate.
** Setup the choice of the shell to use
This will disable the query of which shell to run.  We'll start with fish.
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar my-term-shell "/usr/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
** Close on exit
#+BEGIN_SRC emacs-lisp :tangle yes
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)
#+END_SRC
** Mode toggle
We can either be in char mode, which is more like a traditional terminal
emulator, or in line mode, which is more akin to the M-x shell behaviour.
Toggle with C-x C-j.
#+BEGIN_SRC emacs-lisp :tangle yes
(defun term-toggle-mode ()
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))
#+END_SRC
** Terminal Hooks
#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-term-hook ()
  (goto-address-mode)
  (local-set-key "\C-c\C-j" 'term-toggle-mode) ;; toggle line/char mode
  (local-set-key "\C-c\C-k" 'term-toggle-mode)
  (setq global-hl-line-mode nil)
  (setq term-buffer-maximum-size 10000)
  (setq-local ml-interactive? t) ;; for mode line
  (setq-local show-dir-in-mode-line? t) ;; also mode linec'
  (setq show-trailing-whitespace nil)
  ;; disable company in favor of shell completion
  (company-mode -1))
(add-hook 'term-mode-hook 'my-term-hook)
#+END_SRC
** Alias
Run the terminal by doing M-x sh
#+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'sh 'ansi-term)
#+END_SRC
** Better Shell
The default and recommended bindings seem to work OK.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
           ("C-;" . better-shell-remote-open)))
#+END_SRC
* Swiper, counsel and ivy
Swiper gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line))
)

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "%d/%d ")
)

(use-package swiper
  :ensure t
  :diminish ivy-mode
  :bind (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-M-i" . complete-symbol)
         ("C-." . counsel-imenu)
         ("C-c 8" . counsel-unicode-char)
         ("C-c v" . ivy-push-view)
         ("C-c V" . ivy-pop-view)
         ("M-y" . counsel-yank-pop))
  )

#+END_SRC
* Miscellaneous Packages to aid workflow
** Company mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** Flycheck
[[https://github.com/flycheck/flycheck][Flycheck]] works out of the box so there is no real configuration or customization
to do.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
   :ensure t
   :init
     (global-flycheck-mode t)
)
#+END_SRC
** PDF Tools
PDFTools lets me annotate/markup pdf files, search with in pdf documents and a
bunch of other cool stuff.  I want to try and make it work for my research
projects.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    )

  (use-package org-pdfview
    :ensure t)
#+END_SRC
** Popup Kill Ring
/I am using counsel-yank-pop right now.  I'll decide later on this./
Give a popup menu for pasting from the kill ring and bind it to M-y
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))

#+END_SRC
** Hungry delete - delete all white space when you delete one
Since I am using Paredit it redefines the functions hungry delete uses so I need
to set backward-delete-char-untabify-method to all to get the backspace portion
of this working.  I haven't figured out how to get the forward delete enabled yet.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode)
            (setq backward-delete-char-untabify-method 'all))
#+END_SRC
** Getting word definitions
I will try define-word from Melpa written by abo-abo.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package define-word
    :ensure t
    :bind (("C-c d" . define-word-at-point)
           ("C-c D" . define-word))
    )
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    )
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
* Org Mode
I'll gradually build this up from different places as I get more proficient with
all things org.
** set up my org structure templates
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC"))
#+END_SRC

** org-ac

This is a extension of Emacs that provide auto-complete sources for org-mode.
This allows us to use auto-complete as substitute for pcomplete which is bound to M-TAB.

#+BEGIN_SRC emacs-lisp :tangle no 

(use-package org-ac
    :ensure t
    :init (progn
      (require 'org-ac)
      (org-ac/config-default)
     ))

#+END_SRC

** Org Default directories

#+BEGIN_SRC emacs-lisp :tangle yes

      (custom-set-variables
        '(org-directory "~/Dropbox/orgfiles")
        '(org-default-notes-file (concat org-directory "/notes.org"))
        '(org-export-html-postamble nil)
        '(org-hide-leading-stars t)
        '(org-startup-folded (quote overview))
        '(org-startup-indented t)
          )

      (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                                   "~/Dropbox/orgfiles/life.org"
                                   "~/Dropbox/orgfiles/work.org"
                                   "~/Dropbox/orgfiles/tech.org"
                                   "~/Dropbox/orgfiles/write.org"
                                   "~/Dropbox/orgfiles/theo.org")
      )

#+END_SRC

** org capture setup

#+BEGIN_SRC emacs-lisp :tangle yes

  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cb" 'org-switchb)

  (setq org-capture-templates
     '(
       ("b" "Book Project")
       ("bs" "Scene" entry
        (file+headline "~/Dropbox/orgfiles/book-projects/scenes.org" "Scenes")
        (file "~/Dropbox/orgfiles/org-templates/tpl-book-scene.txt")
        :prepend t :empty-lines-before 1)
       ("bb" "Bio" entry
        (file+headline "~/Dropbox/orgfiles/book-projects/bios.org" "Biographies")
        (file "~/Dropbox/orgfiles/org-templates/tpl-book-bio.txt")
        :prepend t :empty-lines-before 1)
       ("bi" "Idea" entry
        (file+headline "~/Dropbox/orgfiles/book-projects/book-ideas.org" "Ideas")
        (file "~/Dropbox/orgfiles/org-templates/tpl-book-idea.txt")
        :prepend t :empty-lines-before 1)
       ("r" "Research Notes")
       ("rt" "Text Note" entry
        (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
        (file "~/Dropbox/orgfiles/org-templates/tpl-text-note.txt")
        :prepend t :empty-lines-before 1)
       ("rl" "Link Note" entry
        (file+headline "~/Dropbox/orgfiles/links.org" "Links")
        (file "~/Dropbox/orgfiles/org-templates/tpl-link-note.txt")
        :prepend t :empty-lines-before 1)
       )
  )

  (defadvice org-capture-finalize 
     (after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
     (if (equal "capture" (frame-parameter nil 'name))  
         (delete-frame)))

  (defadvice org-capture-destroy 
     (after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
     (if (equal "capture" (frame-parameter nil 'name))  
         (delete-frame)))  

  (use-package noflet
     :ensure t )
       (defun make-capture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "capture")))
        (select-frame-by-name "capture")
        (delete-other-windows)
        (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
          (org-capture))
  )

#+END_SRC

** Syntax highlighting in code blocks
Very important if your config file is a .org document… Also, add native <tab>
behavior in source blocks.

#+BEGIN_SRC emacs-lisp :tangle yes

(setq
 org-src-fontify-natively t
 org-src-tab-acts-natively t)

#+END_SRC

Also LaTeX output
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-latex-listings 'minted)
#+END_SRC
** org-latex settings
For some reason, explained [[http://orgmode.org/worg/org-dependencies.html][here]], we need to run pdflatex with the -shell-escape
flag.  This is getting too complicated so we're just going to run [[http://users.phys.psu.edu/~collins/software/latexmk-jcc/][latexmk]] from
org.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-latex-pdf-process (list "latexmk -f -pdf %f"))
#+END_SRC

** Default Applications
Org opens PDFs by default in gv… change that to evince. Also open HTML in
Firfox.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-file-apps '((auto-mode . emacs)
                      ("\\.x?html?\\'" . "firefox %s")
                      ("\\.pdf\\'" . "evince \"%s\"")
                      ("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
                      ("\\.pdf.xoj" . "xournal %s")))
#+END_SRC
** org-babel

[[http://orgmode.org/worg/org-contrib/babel/][Babel]] lets the user run code inside an org-mode document and of course we are
using it for this init file.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-file-apps '((auto-mode . emacs)
                      ("\\.x?html?\\'" . "firefox %s")
                      ("\\.pdf\\'" . "evince \"%s\"")
                      ("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1")
                      ("\\.pdf.xoj" . "xournal %s")))
#+END_SRC

* Programming Environments
** Clojure
*** CIDER REPL
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set up Environment for Clojure
;; First CIDER
(use-package cider
  :ensure t)
#+END_SRC
** Python
